import { PerspectiveCamera, useGLTF } from "@react-three/drei";
import {
  CylinderCollider,
  RigidBody,
  RigidBodyApi,
  RigidBodyProps,
} from "@react-three/rapier";
import { forwardRef, useRef } from "react";
import type { Material, Mesh } from "three";
import type { GLTF } from "three-stdlib/loaders/GLTFLoader";

useGLTF.preload("/wheel.glb");

// Initially Auto-generated by: https://github.com/pmndrs/gltfjsx

type WheelGLTF = GLTF & {
  materials: Record<"Chrom" | "Rubber" | "Steel", Material>;
  nodes: Record<"wheel_1" | "wheel_2" | "wheel_3", Mesh>;
};

type WheelProps = RigidBodyProps & {
  leftSide?: boolean;
  radius: number;
};

export const Wheel = forwardRef<RigidBodyApi, WheelProps>(
  ({ leftSide, radius = 0.7, ...props }, ref) => {
    const {
      materials: { Chrom, Rubber, Steel },
      nodes,
    } = useGLTF("/wheel.glb") as unknown as WheelGLTF;

    return (
      <RigidBody
        ref={ref}
        canSleep={false}
        // enabledTranslations={[false, true, true]}
        // enabledRotations={[true, false, false]}
        // rotation={[0.3, 0, 0]} //TODO
      >
        <CylinderCollider args={[0.2, radius]}>
          <group rotation={[0, 0, ((leftSide ? 1 : -1) * Math.PI) / 2]}>
            <mesh material={Rubber} geometry={nodes.wheel_1.geometry} />
            <mesh material={Steel} geometry={nodes.wheel_2.geometry} />
            <mesh material={Chrom} geometry={nodes.wheel_3.geometry} />
          </group>
        </CylinderCollider>
      </RigidBody>
    );
  }
);
