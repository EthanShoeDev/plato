/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { Mesh } from "three";
import { TrimeshProps, Triplet, useTrimesh } from "@react-three/cannon";
import niceColors from "nice-color-palettes";

type GLTFResult = GLTF & {
  nodes: {
    qPipe: THREE.Mesh;
  };
  materials: {};
};

export function QuarterPipe({
  rotation,
  position,
}: Pick<TrimeshProps, "rotation" | "position">) {
  const { nodes, materials } = useGLTF(
    "/quarterPipe.glb"
  ) as unknown as GLTFResult;
  const vertices = nodes.qPipe.geometry.attributes.position.array;
  const indices = nodes.qPipe.geometry.index?.array ?? [];
  console.log(nodes);
  const [ref, meshApi] = useTrimesh(
    () => ({
      args: [vertices, indices],
      mass: 0,
      rotation,
      position,
    }),
    useRef<Mesh>(null)
  );

  useEffect(() => {});

  return (
    <mesh ref={ref} geometry={nodes.qPipe.geometry}>
      <meshStandardMaterial color={niceColors[50][0]} />
    </mesh>
  );
}

useGLTF.preload("/quarterPipe.glb");
